"""Simple async task queue with background worker and concurrency control"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_queue.ipynb.

# %% auto 0
__all__ = ['TaskQueue']

# %% ../nbs/01_queue.ipynb 4
import asyncio

# %% ../nbs/01_queue.ipynb 11
class TaskQueue:
    def __init__(self, max_workers, handler):
        self.max_workers = max_workers
        self.handler = handler
        self.Q = asyncio.Queue()
        self.SEM = asyncio.Semaphore(max_workers)
    
    async def start(self):
        """Start background worker that processes tasks from queue"""
        async def worker():
            while True:
                task_data = await self.Q.get()
                asyncio.create_task(self._guarded_execute(task_data))
        asyncio.create_task(worker())
    
    async def _guarded_execute(self, task_data):
        """Execute handler with semaphore guard to limit concurrency"""
        async with self.SEM:
            await self.handler(*task_data)
    
    async def enqueue(self, *args):
        """Add task to queue"""
        await self.Q.put(args)
